"""
Data models for news URL extraction.

Defines the structure for news items during extraction and the final
database schema for the news_urls table.
"""

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from typing import Optional


@dataclass
class NewsItem:
    """
    Raw news item extracted from a source.

    This is the intermediate format used during extraction, before
    transformation to the database schema.
    """

    url: str
    title: Optional[str] = None
    published_date: Optional[datetime] = None
    publisher: Optional[str] = None
    source_name: Optional[str] = None
    source_type: Optional[str] = None  # 'rss', 'sitemap', 'html'
    description: Optional[str] = None
    author: Optional[str] = None
    tags: list[str] = field(default_factory=list)
    is_nfl_content: Optional[bool] = None

    def __post_init__(self):
        """Validate required fields."""
        if not self.url:
            raise ValueError("NewsItem must have a URL")

        # Ensure URL is properly formatted
        if not self.url.startswith(("http://", "https://")):
            raise ValueError(f"Invalid URL format: {self.url}")


@dataclass
class NewsUrl:
    """
    Final database record for news_urls table.

    Matches the Supabase table schema:
    - id: UUID (auto-generated by Supabase)
    - url: Article URL (unique)
    - title: Article title
    - description: Short summary from RSS/sitemap
    - publication_date: When article was published
    - source_name: Name of the source (e.g., "ESPN - NFL News")
    - publisher: Publisher name (e.g., "ESPN")
    """

    url: str
    title: Optional[str] = None
    description: Optional[str] = None
    publication_date: Optional[datetime] = None
    source_name: Optional[str] = None
    publisher: Optional[str] = None

    def to_dict(self) -> dict:
        """
        Convert to dictionary for database insertion.

        Returns:
            Dictionary with all fields, ready for Supabase upsert.
            Note: 'id' is auto-generated by Supabase and not included.
        """
        return {
            "url": self.url,
            "title": self.title,
            "description": self.description,
            "publication_date": self.publication_date.isoformat() if self.publication_date else None,
            "source_name": self.source_name,
            "publisher": self.publisher,
        }

    @classmethod
    def from_news_item(cls, item: NewsItem, extracted_date: Optional[datetime] = None) -> NewsUrl:
        """
        Create a NewsUrl from a NewsItem.

        Args:
            item: Source NewsItem from extractor
            extracted_date: When this item was extracted (not used in final schema)

        Returns:
            NewsUrl ready for database insertion
        """
        return cls(
            url=item.url,
            title=item.title,
            description=item.description,
            publication_date=item.published_date,
            source_name=item.source_name,
            publisher=item.publisher or "Unknown",
        )
