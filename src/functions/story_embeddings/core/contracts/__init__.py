"""
Data contracts for story embeddings.

Defines the structure for summary records and embedding vectors.
"""

from __future__ import annotations

from dataclasses import dataclass
from datetime import datetime
from typing import Optional


@dataclass
class SummaryRecord:
    """
    Represents a content summary that needs an embedding.

    This is fetched from the context_summaries table.
    """

    news_url_id: str  # UUID from news_urls table
    summary_text: str  # The text to embed
    created_at: Optional[datetime] = None

    @classmethod
    def from_dict(cls, data: dict) -> SummaryRecord:
        """
        Create SummaryRecord from database record.

        Args:
            data: Dictionary from Supabase query

        Returns:
            SummaryRecord instance
        """
        created_at = None
        if data.get("created_at"):
            if isinstance(data["created_at"], str):
                from dateutil import parser
                created_at = parser.parse(data["created_at"])
            else:
                created_at = data["created_at"]

        return cls(
            news_url_id=data["news_url_id"],
            summary_text=data["summary_text"],
            created_at=created_at,
        )


@dataclass
class StoryEmbedding:
    """
    Represents an embedding vector for a story summary.

    This is stored in the story_embeddings table for similarity search
    and story clustering.
    """

    # Reference to news_url record (via content_summaries)
    news_url_id: str  # UUID from news_urls table -> content_summaries.news_url_id

    # Embedding data
    embedding_vector: list[float]  # The actual embedding (1536 dimensions for text-embedding-3-small)
    model_name: str = "text-embedding-3-small"  # OpenAI model used

    # Timestamps
    generated_at: Optional[datetime] = None  # When the embedding was generated
    created_at: Optional[datetime] = None  # Database creation timestamp
    id: Optional[str] = None  # UUID (auto-generated by database)

    def to_dict(self) -> dict:
        """
        Convert to dictionary for database insertion.

        Returns:
            Dictionary ready for Supabase upsert.
        """
        return {
            "news_url_id": self.news_url_id,
            "embedding_vector": self.embedding_vector,
            "model_name": self.model_name,
            "generated_at": self.generated_at.isoformat() if self.generated_at else None,
            "created_at": self.created_at.isoformat() if self.created_at else None,
        }

    @classmethod
    def from_dict(cls, data: dict) -> StoryEmbedding:
        """
        Create StoryEmbedding from database record.

        Args:
            data: Dictionary from Supabase query

        Returns:
            StoryEmbedding instance
        """
        # Parse datetime strings if present
        generated_at = None
        if data.get("generated_at"):
            if isinstance(data["generated_at"], str):
                from dateutil import parser
                generated_at = parser.parse(data["generated_at"])
            else:
                generated_at = data["generated_at"]

        created_at = None
        if data.get("created_at"):
            if isinstance(data["created_at"], str):
                from dateutil import parser
                created_at = parser.parse(data["created_at"])
            else:
                created_at = data["created_at"]

        return cls(
            id=data.get("id"),
            news_url_id=data["news_url_id"],
            embedding_vector=data["embedding_vector"],
            model_name=data.get("model_name", "text-embedding-3-small"),
            generated_at=generated_at,
            created_at=created_at,
        )
